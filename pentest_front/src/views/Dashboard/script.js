import Vue from 'vue';
import Component from 'vue-class-component';
import {Watch} from 'vue-property-decorator';
import {aTypes as actions} from '../../store/commands/actions';
import {gTypes as getters} from '../../store/commands/getters';
import {cloneDeep, isEqual} from 'lodash';


@Component
class Dashboard extends Vue {
    localPagination = cloneDeep(this.pagination);
    search = '';

    get table() {
        return this.$store.getters[getters['commands']];
    }

    get items() {
        return this.table.items;
    }

    get headers() {
        return this.table.columns.map((item) => ({
            ...item,
        }));
    }

    get pagination() {
        return this.table.pagination;
    }

    @Watch('pagination', {deep: true})
    async updateLocalPagination(pagination) {
        if (isEqual(this.localPagination, pagination)) {
            return;
        }
        this.localPagination = cloneDeep(pagination);
    }

    @Watch('localPagination', {deep: true})
    async updateStorePagination(pagination) {
        if (isEqual(pagination, this.pagination)) {
            return;
        }
        await this.$store.dispatch(actions.savePagination, {
            tableName: 'commands',
            pagination: cloneDeep(pagination),
            vm: this,
        });
    }

    async mounted() {
        await this.$store.dispatch(actions.loadItems, {tableName: 'commands', vm: this});
    }
}

export default Dashboard;