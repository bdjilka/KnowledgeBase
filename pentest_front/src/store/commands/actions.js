import {mTypes as mutations} from './mutations';
import * as api from '../../api';
import {dispatch} from '../utils';
import {aTypes as appActions} from '../app/actions';

export const aTypes = {
    loadItems: 'commands/loadItems',
    savePagination: 'commands/savePagination',
    saveFilters: 'commands/saveFilters',
};

export const actions = {
    async loadItems(cntx, {tableName, vm}) {
        /**
         * Loads table items in store.
         * @param cntx
         * @param {string} tableName now equal to 'commands'
         * @param {Object} vm Vue instance
         */
        try {
            dispatch(cntx, appActions.changeLoading);

            const table = cntx.getters[tableName];

            const {data} = await api.getTableData(table.endpoint, table.pagination, table.filters);

            const items = data['results'];
            cntx.commit(mutations.UPDATE_ITEMS, {tableName, items});

            const pagination = {totalItems: data['count']};
            cntx.commit(mutations.UPDATE_PAGINATION, {tableName, pagination});
        } catch (e) {
            alert('Ошибка загрузки данных с сервера' + vm);
        } finally {
            dispatch(cntx, appActions.changeLoading);
        }
    },

    async savePagination(cntx, payload) {
        /**
         * Updates table pagination including ordering.
         * @param {Object} payload
         */
        cntx.commit(mutations.UPDATE_PAGINATION, payload);
        dispatch(cntx, aTypes.loadItems, {tableName: payload.tableName, vm: payload.vm});
    },

    async saveFilters(cntx, payload) {
        /**
         * Updates table filters.
         * @param {Object} payload
         */
        cntx.commit(mutations.UPDATE_FILTERS, payload);
        dispatch(cntx, aTypes.loadItems, {tableName: payload.tableName, vm: payload.vm});
    },
};