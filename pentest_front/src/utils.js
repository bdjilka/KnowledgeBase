export function fromStorage(key) {
    try {
        return JSON.parse(sessionStorage[key]);
    } catch (e) {
        return undefined;
    }
}

export function toStorage(key, value) {
    sessionStorage[key] = JSON.stringify(value);
}

export function makePaginationQuery(pagination) {
    /**
     * Creates pagination query parameters for request. Used offset approach.
     * @param {Object} pagination               pagination entity
     * @param {number} pagination.page          current page
     * @param {number} pagination.rowsPerPage   limit for single page
     */
    const offset = pagination.rowsPerPage * pagination.page - pagination.rowsPerPage;
    const limit = pagination.rowsPerPage;
    return `offset=${offset}&limit=${limit}`;
}

export function makeSortQuery(endpoint, pagination) {
    /**
     * Creates order query parameter for request.
     * @param {string} endpoint         name of api
     * @param {Object} pagination       contains information about order value
     */
    let query = pagination.sortBy;
    if (query == null || query.length === 0) {
        return '';
    }

    query = pagination.sortDesc[0] === false ? query[0] : `-${query[0]}`;
    query = `&ordering=${query}`;
    return query;
}

export function makeFilterQuery(filters) {
    /**
     * Creates filtering query for request.
     * @param {Array} filters    array of dicts {filter_key: filter_value}
     */
    let query = [];
    for (let key in filters) {
        if (key === 'search') {
            if (filters[key] != null) {
                const words = filters[key].split(' ');
                words.forEach(item => {
                    query.push(`${key}=${item}`);
                });
            }
        } else {
            if (!!filters[key] || filters[key] === 0) {
                query.push(`${key}=${filters[key]}`);
            }
        }
    }
    if (query.length > 0) {
        return '&' + query.join('&');
    } else {
        return '';
    }
}