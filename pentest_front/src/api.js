import axios from './axios';
import {makeFilterQuery, makePaginationQuery, makeSortQuery} from "./utils";


export function login(username, password) {
    /**
     * Request to get token. Response contains JWT token.
     */
    return axios.post('auth/token/login/', {username, password});
}

export function signup(username, password, email) {
    /**
     * Request create user. Response contains error or success message.
     */
    return axios.post('users/', {username, password, email});
}

export function getUserInfo(pk) {
    /**
     * Returns information about user by its id: username, first and last name.
     */
    return axios.get('users/' + pk + '/');
}

export function refresh(token) {
    /**
     * Allows to refresh token. Response contains new JWT token or error if input token is expired or refresh delta
     * time is expired.
     */
    return axios.post('auth/token/refresh/', {token});
}

export function getTableData(endpoint, pagination, filters) {
    /**
     * Allows to get items for table with needed ordering and filtration.
     * @param {string} endpoint         some api endpoint
     * @param {Object} pagination
     * @param {Array} filters
     */
    const pagination_query = makePaginationQuery(pagination);
    const sort = makeSortQuery(endpoint, pagination);
    const filter = makeFilterQuery(filters);
    const url = `/${filter ? 'search': endpoint}/?${pagination_query}${sort}${filter}`;
    return axios.get(url);
}

export function getCommand(id) {
    /**
     * GET request for command instance with the pk equal to id. Response is serialized data including about
     * related tags and sphere.
     */
    return axios.get(`/commands/${id}`);
}