from django.shortcuts import render
from rest_framework import viewsets, permissions, filters
from rest_framework.decorators import action
from rest_framework.response import Response

from pentest_brain.models import Pentester, Sphere, Tag, Command
from pentest_brain.serializers import PentesterSerializer, SphereSerializer, TagSerializer, CommandSerializer

from django_elasticsearch_dsl_drf.constants import (
    LOOKUP_FILTER_TERMS,
    LOOKUP_FILTER_RANGE,
    LOOKUP_FILTER_PREFIX,
    LOOKUP_FILTER_WILDCARD,
    LOOKUP_QUERY_IN,
    LOOKUP_QUERY_GT,
    LOOKUP_QUERY_GTE,
    LOOKUP_QUERY_LT,
    LOOKUP_QUERY_LTE,
    LOOKUP_QUERY_EXCLUDE,
)
from django_elasticsearch_dsl_drf.filter_backends import (
    FilteringFilterBackend,
    IdsFilterBackend,
    OrderingFilterBackend,
    DefaultOrderingFilterBackend,
    CompoundSearchFilterBackend)
from django_elasticsearch_dsl_drf.viewsets import BaseDocumentViewSet
from django_elasticsearch_dsl_drf.pagination import LimitOffsetPagination
from pentest_brain.documents.command import CommandDocument
from pentest_brain.serializers import CommandDocumentSerializer


class PentesterViewSet(viewsets.ModelViewSet):
    """
    API endpoint to work with users.
    """
    queryset = Pentester.objects.all()
    permission_classes = [permissions.AllowAny, ]
    serializer_class = PentesterSerializer


class SphereViewSet(viewsets.ModelViewSet):
    """
    API endpoint to work with spheres.
    """
    queryset = Sphere.objects.all()
    permission_classes = [permissions.AllowAny, ]
    serializer_class = SphereSerializer


class TagViewSet(viewsets.ModelViewSet):
    """
    API endpoint to work with tags.
    """
    queryset = Tag.objects.all()
    permission_classes = [permissions.AllowAny, ]
    serializer_class = TagSerializer


class CommandViewSet(viewsets.ModelViewSet):
    """
    API endpoint to work with commands.
    """
    queryset = Command.objects.all()
    permission_classes = [permissions.AllowAny, ]
    serializer_class = CommandSerializer
    filter_backends = [filters.OrderingFilter]
    ordering_fields = ['id']


class CommandDocumentView(BaseDocumentViewSet):
    """The CommandDocument view."""

    document = CommandDocument
    serializer_class = CommandDocumentSerializer
    pagination_class = LimitOffsetPagination
    lookup_field = 'id'
    filter_backends = [
        FilteringFilterBackend,
        IdsFilterBackend,
        OrderingFilterBackend,
        DefaultOrderingFilterBackend,
        CompoundSearchFilterBackend,
    ]
    # Define search fields
    search_fields = (
        'command',
        'description',
        'tags',
    )
    # Define filter fields
    filter_fields = {
        'id': {
            'field': 'id',
            # Note, that we limit the lookups of id field in this example,
            # to `range`, `in`, `gt`, `gte`, `lt` and `lte` filters.
            'lookups': [
                LOOKUP_FILTER_RANGE,
                LOOKUP_QUERY_IN,
                LOOKUP_QUERY_GT,
                LOOKUP_QUERY_GTE,
                LOOKUP_QUERY_LT,
                LOOKUP_QUERY_LTE,
            ],
        },
        'command': 'command.raw',
        'description': 'description.raw',
        'sphere': 'sphere.raw',
        'tags': {
            'field': 'tags',
            # Note, that we limit the lookups of `tags` field in
            # this example, to `terms, `prefix`, `wildcard`, `in` and
            # `exclude` filters.
            'lookups': [
                LOOKUP_FILTER_TERMS,
                LOOKUP_FILTER_PREFIX,
                LOOKUP_FILTER_WILDCARD,
                LOOKUP_QUERY_IN,
                LOOKUP_QUERY_EXCLUDE,
            ],
        },
        'tags.raw': {
            'field': 'tags.raw',
            # Note, that we limit the lookups of `tags.raw` field in
            # this example, to `terms, `prefix`, `wildcard`, `in` and
            # `exclude` filters.
            'lookups': [
                LOOKUP_FILTER_TERMS,
                LOOKUP_FILTER_PREFIX,
                LOOKUP_FILTER_WILDCARD,
                LOOKUP_QUERY_IN,
                LOOKUP_QUERY_EXCLUDE,
            ],
        },
    }
    # Define ordering fields
    ordering_fields = {
        'id': 'id',
        'description': 'description.raw',
        'command': 'command'
    }
    # Specify default ordering
    ordering = ('id',)
