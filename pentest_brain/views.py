import logging

from rest_framework import viewsets, permissions, filters
from rest_framework.response import Response

from pentest_brain.models import Pentester, Sphere, Tag, Command
from pentest_brain.serializers import PentesterSerializer, SphereSerializer, TagSerializer, CommandSerializer, \
    UserPostSerializer

logger = logging.getLogger(__name__)


class PentesterViewSet(viewsets.ModelViewSet):
    """
    API endpoint to work with users.
    """
    queryset = Pentester.objects.all()
    permission_classes = [permissions.AllowAny, ]
    serializer_class = PentesterSerializer

    def create(self, request, *args, **kwargs):
        """
        Creation of user
        :param request: must contain all needed information:
            -- username, password, email
        :return: status code and error message or serialized student data
            -- 400: invalid data or some error
            -- 201: it's OK, object was created
        """
        try:
            user = UserPostSerializer(data=request.data)
            password = request.data.get('password', None)
            username = request.data.get('username', None)

            if user.is_valid():
                user_instance = user.save(password=password)
                user_instance.set_password(password)
                user_instance.save()

                logging.info('User -{}- successfully created'.format(username))
                return Response(data={'success': 'Profile was registered'}, status=201)
            else:
                error = user.errors.get('username', '')
                if len(error) > 0 and Pentester.objects.filter(username=username).count() > 0:
                    logging.error('User with username {} already exists'.format(username))
                    return Response(data={'error': 'Username {} already exists'.format(username)}, status=400)

                logging.error('User {} validation failed: {}'.format(username, user.errors))
                return Response({'error': 'Data is not valid'}, status=400)
        except Exception as e:
            logging.error('User {} creation unexpected error: {}'.format(username, e))
            return Response({'error': 'Unexpected error'}, status=418)


class SphereViewSet(viewsets.ModelViewSet):
    """
    API endpoint to work with spheres.
    """
    queryset = Sphere.objects.all()
    permission_classes = [permissions.AllowAny, ]
    serializer_class = SphereSerializer


class TagViewSet(viewsets.ModelViewSet):
    """
    API endpoint to work with tags.
    """
    queryset = Tag.objects.all()
    permission_classes = [permissions.AllowAny, ]
    serializer_class = TagSerializer


class CommandViewSet(viewsets.ModelViewSet):
    """
    API endpoint to work with commands.
    """
    queryset = Command.objects.all()
    permission_classes = [permissions.AllowAny, ]
    serializer_class = CommandSerializer
    filter_backends = [filters.OrderingFilter]
    ordering_fields = ['id']
